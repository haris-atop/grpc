// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: tes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TesServiceClient is the client API for TesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TesServiceClient interface {
	Tes1(ctx context.Context, in *TesRequest, opts ...grpc.CallOption) (*TesRequest, error)
}

type tesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTesServiceClient(cc grpc.ClientConnInterface) TesServiceClient {
	return &tesServiceClient{cc}
}

func (c *tesServiceClient) Tes1(ctx context.Context, in *TesRequest, opts ...grpc.CallOption) (*TesRequest, error) {
	out := new(TesRequest)
	err := c.cc.Invoke(ctx, "/tes.TesService/Tes1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TesServiceServer is the server API for TesService service.
// All implementations must embed UnimplementedTesServiceServer
// for forward compatibility
type TesServiceServer interface {
	Tes1(context.Context, *TesRequest) (*TesRequest, error)
	mustEmbedUnimplementedTesServiceServer()
}

// UnimplementedTesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTesServiceServer struct {
}

func (UnimplementedTesServiceServer) Tes1(context.Context, *TesRequest) (*TesRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tes1 not implemented")
}
func (UnimplementedTesServiceServer) mustEmbedUnimplementedTesServiceServer() {}

// UnsafeTesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TesServiceServer will
// result in compilation errors.
type UnsafeTesServiceServer interface {
	mustEmbedUnimplementedTesServiceServer()
}

func RegisterTesServiceServer(s grpc.ServiceRegistrar, srv TesServiceServer) {
	s.RegisterService(&TesService_ServiceDesc, srv)
}

func _TesService_Tes1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesServiceServer).Tes1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tes.TesService/Tes1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesServiceServer).Tes1(ctx, req.(*TesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TesService_ServiceDesc is the grpc.ServiceDesc for TesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tes.TesService",
	HandlerType: (*TesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tes1",
			Handler:    _TesService_Tes1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tes.proto",
}
